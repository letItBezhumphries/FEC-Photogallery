orbs:
  slack: circleci/slack@4.2.0
version: 2.1
executors:
  photos-executor:
    docker:
      - image: circleci/node:14.5.0
    working_directory: ~/photos-repo
  terraform-executor:
    docker:
      - image: hashicorp/terraform:0.14.3
  packer-executor:
    docker:
      - image: hashicorp/packer:1.7.0

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - photosApp-{{ checksum "package.json" }}
        - photosApp-
  - &install-dependencies
    run:
      name: Install dependencies
      command: |
        mkdir -p artifacts
        npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: photosApp-{{ checksum "package.json" }}
  - &install-aws-cli
    run:
      name: Installing AWS_CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python-pip python-dev build-essential
  - &build-with-webpack
    run:
      name: Build project
      command: |
        npm install
        npm run build
        cd public/dist
        zip ../dist.zip -r * .[^.]*
        echo "Build successful"
  - &install-packer
    run:
      name: Install Packer
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y sshd
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install packer

jobs:
  build:
    executor: photos-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: Copy infrastructure folder
          command: cp -r infrastructure artifacts/infrastructure
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  linting:
    executor: photos-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run linting
          command: npm run lint

  prettier:
    executor: photos-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run prettier check
          command: npm run prettier:check

  packer-build-aws-ami:
    executor: packer-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name

      - run:
          name: Packer build AWS ami
          command: |
            cd infrastructure/
            ssh-keygen -f mykey
            ARTIFACT=$(packer build -machine-readable photogallery-packer.json | awk -F, '$0 ~/artifact,0,id/ {print $6}')
            echo $ARTIFACT
            AMI_ID=$(echo $ARTIFACT | cut -d ':' -f2)
            echo $AMI_ID
            echo 'variable "AMI_ID" { default = "'${AMI_ID}'" }' > amivar.tf
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform validate & format
          command: |
            cd infrastructure/
            terraform init -backend=false
            terraform validate
            terraform fmt -check

  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - run:
          name: Terraform Plan
          command: |
            cd artifacts/infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan
      - run:
          name: Terraform Apply
          command: |
            cd artifacts/infrastructure/
            terraform workspace select ${CIRCLE_BRANCH}
            terraform apply --auto-approve
            terraform output photogallery_bucket_name > ../photogallery_bucket_name.txt
            terraform output photogallery_cloudfront_distribution_id > ../photogallery_cloudfront_distribution_id.txt
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  deploy-to-aws-s3:
    executor: photos-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-with-webpack
      - run:
          name: Deploy to AWS s3
          command: |
            AWS_BUCKET_NAME=$(cat artifacts/photogallery_bucket_name.txt | sed 's/\"//g')
            echo $AWS_BUCKET_NAME
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then 
              aws --region ${AWS_REGION} s3 sync ~/photos-repo/public/dist s3://${AWS_BUCKET_NAME} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then 
              aws --region ${AWS_REGION} s3 sync ~/photos-repo/public/dist s3://${AWS_BUCKET_NAME} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/photos-repo/public/dist s3://${AWS_BUCKET_NAME} --delete
            fi

  deploy-to-aws-cloudfront:
    executor: photos-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-with-webpack
      - run:
          name: Deploy to AWS Cloudfront
          command: |
            CLOUDFRONT_DIST_ID=$(cat artifacts/photogallery_cloudfront_distribution_id.txt | sed 's/\"//g')
            echo $CLOUDFRONT_DIST_ID
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then 
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DIST_ID} --paths /\* 
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then 
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DIST_ID} --paths /\*
            else
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DIST_ID} --paths /\*  
            fi

  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Destroy
          command: |
            cd infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform destroy --auto-approve

workflows:
  build-and-deploy:
    jobs:
      - build
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - terraform-validate:
          requires:
            - linting
            - prettier
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - packer-build-aws-ami:
          requires:
            - terraform-validate
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - terraform-plan-and-apply:
          requires:
            - packer-build-aws-ami
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-s3:
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - hold:
          type: approval
          requires:
            - deploy-to-aws-cloudfront
      - terraform-destroy:
          requires:
            - hold
          filters:
            branches:
              only:
                - develop
                - staging
                - master
